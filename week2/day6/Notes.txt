What is a Circular Queue?

The operations are performed based on FIFO (First In First Out) principle. It is also called ‘Ring Buffer’.


Operations on Circular Queue:
Front: Get the front item from the queue.
Rear: Get the last item from the queue.
enQueue(value) This function is used to insert an element into the circular queue. In a circular queue, the new element is always inserted at the rear position. 
Check whether the queue is full – [i.e., the rear end is in just before the front end in a circular manner].
If it is full then display Queue is full. 
If the queue is not full then,  insert an element at the end of the queue.
deQueue() This function is used to delete an element from the circular queue. In a circular queue, the element is always deleted from the front position. 
Check whether the queue is Empty.
If it is empty then display Queue is empty.
If the queue is not empty, then get the last element and remove it from the queue.

A circular queue can be implemented using two data structures:

Array
Linked List

Implement Circular Queue using Array:

Initialize an array queue of size n, where n is the maximum number of elements that the queue can hold.
Initialize two variables front and rear to -1.
Enqueue: To enqueue an element x into the queue, do the following:
Increment rear by 1.
If rear is equal to n, set rear to 0.
If front is -1, set front to 0.
Set queue[rear] to x.
Dequeue: To dequeue an element from the queue, do the following:
Check if the queue is empty by checking if front is -1. 
If it is, return an error message indicating that the queue is empty.
Set x to queue[front].
If front is equal to rear, set front and rear to -1.
Otherwise, increment front by 1 and if front is equal to n, set front to 0.
Return x.


Operations on Circular Queue:

Front:Get the front item from queue.
Rear: Get the last item from queue.
enQueue(value) This function is used to insert an element into the circular queue. In a circular queue, the new element is always inserted at Rear position.
Create a new node dynamically and insert value into it.
Check if front==NULL, if it is true then front = rear = (newly created node)
If it is false then rear=(newly created node) and rear node always contains the address of the front node.
deQueue() This function is used to delete an element from the circular queue. In a queue, the element is always deleted from front position.
Check whether queue is empty or not means front == NULL.
If it is empty then display Queue is empty. If queue is not empty then step 3
Check if (front==rear) if it is true then set front = rear = NULL else move the front forward in queue, update address of front in rear node and 
return the element.