A linked list is a fundamental data structure in computer science.
It consists of nodes where each node contains data and a reference (link) to the next node in the sequence. 
This allows for dynamic memory allocation and efficient insertion and deletion operations compared to arrays.

Node Structure: A node in a linked list typically consists of two components:

Data: It holds the actual value or data associated with the node.
Next Pointer: It stores the memory address (reference) of the next node in the sequence.
Head and Tail: The linked list is accessed through the head node, which points to the first node in the list. 
The last node in the list points to NULL or nullptr, indicating the end of the list. This node is known as the tail node.

Why linked list data structure needed?

Dynamic Data structure: The size of memory can be allocated or de-allocated at run time based on the operation insertion or deletion.
Ease of Insertion/Deletion: The insertion and deletion of elements are simpler than arrays since no elements need to be shifted after insertion and deletion, 
Just the address needed to be updated.
Efficient Memory Utilization: As we know Linked List is a dynamic data structure the size increases or decreases as per the requirement so this avoids 
the wastage of memory. 
Implementation: Various advanced data structures can be implemented using a linked list like a stack, queue, graph, hash maps, etc.


Types of linked lists: 
There are mainly four types of linked lists:

Single-linked list
Double linked list
Circular linked list
Circular doubly linked list


Operations on Linked Lists
Insertion: Adding a new node to a linked list involves adjusting the pointers of the existing nodes to maintain the proper sequence. 
Insertion can be performed at the beginning, end, or any position within the list

Deletion: Removing a node from a linked list requires adjusting the pointers of the neighboring nodes to bridge the gap left by the deleted node. 
Deletion can be performed at the beginning, end, or any position within the list.

Searching: 
Searching for a specific value in a linked list involves traversing the list from the head node until the value is found or the end of the list is reached.

Complexity Analysis of Linked List:
Time Complexity: O(n)
Auxiliary Space: O(n)

Advantages of Linked Lists
Dynamic Size: Linked lists can grow or shrink dynamically, as memory allocation is done at runtime.
Insertion and Deletion: Adding or removing elements from a linked list is efficient, especially for large lists.
Flexibility: Linked lists can be easily reorganized and modified without requiring a contiguous block of memory.

Disadvantages of Linked Lists
Random Access: Unlike arrays, linked lists do not allow direct access to elements by index. Traversal is required to reach a specific node.
Extra Memory: Linked lists require additional memory for storing the pointers, compared to arrays.


// A Single linked list node 
class Node { 
public: 
    int data; 
    Node* next; 
    Node(int d){
        this.data=d;
        this.next -> NULL;
    }
};