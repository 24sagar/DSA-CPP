Queue Data Structure

A Queue Data Structure is a fundamental concept in computer science used for storing and managing data in a specific order.
It follows the principle of “First in, First out” (FIFO).

FIFO Principle of Queue:
A Queue is like a line waiting to purchase tickets, where the first person in line is the first person served.

Characteristics of Queue:
Queue can handle multiple data.
We can access both ends.
They are fast and flexible. 

Queue Representation:
1. Array Representation of Queue:
2.Linked List Representation of Queue:
A queue can also be represented using following entities:

Linked-lists, 
Pointers, and 
Structures.


struct QNode {
	int data;
	QNode* next;
	QNode(int d)
	{
		data = d;
		next = NULL;
	}
};

struct Queue {
	QNode *front, *rear;
	Queue() { front = rear = NULL; }
};


Basic Operations for Queue in Data Structure:
Some of the basic operations for Queue in Data Structure are:

Enqueue() – Adds (or stores) an element to the end of the queue.
Dequeue() – Removal of elements from the queue.
Peek() or front()- Acquires the data element available at the front node of the queue without deleting it.
rear() – This operation returns the element at the rear end without removing it.
isFull() – Validates if the queue is full.
isNull() – Checks if the queue is empty.