Insertion Sort

To sort an array of size N in ascending order iterate over the array and compare the current element (key) to its predecessor, 
if the key element is smaller than its predecessor, compare it to the elements before. 
Move the greater elements one position up to make space for the swapped element.

void insertionSort(int arr[], int n)
{
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
 
        // Move elements of arr[0..i-1],
        // that are greater than key, 
        // to one position ahead of their
        // current position
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

Time Complexity of Insertion Sort O(N^2)
Space Complexity of Insertion Sort O(1)

insertion sort is an in-place sorting algorithm.
insertion sort is a stable sorting algorithm.

Selection Sort 

Selection sort is a simple and efficient sorting algorithm that works by 
repeatedly selecting the smallest (or largest) element from the unsorted portion of the list and moving it to the sorted portion of the list. 

The algorithm repeatedly selects the smallest (or largest) element from the unsorted portion of the list and 
swaps it with the first element of the unsorted part. 
This process is repeated for the remaining unsorted portion until the entire list is sorted.

void selectionSort(int arr[], int n) 
{ 
    int i, j, min_idx; 
  
    // One by one move boundary of 
    // unsorted subarray 
    for (i = 0; i < n - 1; i++) { 
  
        // Find the minimum element in 
        // unsorted array 
        min_idx = i; 
        for (j = i + 1; j < n; j++) { 
            if (arr[j] < arr[min_idx]) 
                min_idx = j; 
        } 
  
        // Swap the found minimum element 
        // with the first element 
        if (min_idx != i) 
            swap(arr[min_idx], arr[i]); 
    } 
} 

selection sort is an in-place sorting algorithm.
selection sort is a not stable sorting algorithm.

Time Complexity of Insertion Sort O(N^2)
Space Complexity of Insertion Sort O(1)