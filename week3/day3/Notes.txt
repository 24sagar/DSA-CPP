Heap

A Heap is a complete binary tree data structure that satisfies the heap property: for every node, 
the value of its children is less than or equal to its own value. 

Types of heaps:
Max-Heap: 
In this heap, the value of the root node must be the greatest among all its child nodes and the same thing must be done for its left and right sub-tree also.

Min-Heap: 
In this heap, the value of the root node must be the smallest among all its child nodes and the same thing must be done for its left and right sub-tree also.

Heap has the following Properties:
Complete Binary Tree: 
A heap tree is a complete binary tree, meaning all levels of the tree are fully filled except possibly the last level, 
which is filled from left to right. This property ensures that the tree is efficiently represented using an array.

Heap Property: 
This property ensures that the minimum (or maximum) element is always at the root of the tree according to the heap type.

Parent-Child Relationship: 
The relationship between a parent node at index ‘i’ and its children is given by the formulas: left child at index 2i+1 and right child at 
index 2i+2 for 0-based indexing of node numbers.

Efficient Insertion and Removal: 
Insertion and removal operations in heap trees are efficient. New elements are inserted at the next available position in the bottom-rightmost level,
and the heap property is restored by comparing the element with its parent and swapping if necessary. Removal of the root element involves 
replacing it with the last element and heapifying down.

Efficient Access to Extremal Elements: The minimum or maximum element is always at the root of the heap, allowing constant-time access.

Operations Supported by Heap:
Heapify:
It is the process to rearrange the elements to maintain the property of heap data structure. 
It is done when a certain node creates an imbalance in the heap due to some operations on that node. It takes O(log N) to balance the tree. 

For max-heap, it balances in such a way that the maximum element is the root of that binary tree and 
For min-heap, it balances in such a way that the minimum element is the root of that binary tree.

Insertion:
If we insert a new element into the heap since we are adding a new element into the heap so it will distort the properties of the heap so 
we need to perform the heapify operation so that it maintains the property of the heap.

This operation also takes O(logN) time.

Deletion:
If we delete the element from the heap it always deletes the root element of the tree and replaces it with the last element of the tree.
Since we delete the root element from the heap it will distort the properties of the heap so we need to perform heapify operations so that 
it maintains the property of the heap. 

It takes O(logN) time.

getMax (For max-heap) or getMin (For min-heap):
It finds the maximum element or minimum element for max-heap and min-heap respectively and as we know minimum and maximum elements will 
always be the root node itself for min-heap and max-heap respectively. It takes O(1) time.

removeMin or removeMax:
This operation returns and deletes the maximum element and minimum element from the max-heap and min-heap respectively. 
In short, it deletes the root element of the heap binary tree.

Applications of Heap Data Structure:

Priority Queues:
Priority queues can be efficiently implemented using Binary Heap because it supports insert(), delete() and extractmax(),
decreaseKey() operations in O(log N) time.

Binomial Heap and Fibonacci Heap are variations of Binary Heap. 
These variations perform union also in O(log N) time which is an O(N) operation in Binary Heap.

Order statistics: 
The Heap data structure can be used to efficiently find the kth smallest (or largest) element in an array. 
You can see this gfg article to know more about the kth smallest or largest element.

Advantages of Heaps:
Fast access to maximum/minimum element (O(1))
Efficient Insertion and Deletion operations (O(log n))
Flexible size
Can be efficiently implemented as an array
Suitable for real-time applications

Disadvantages of Heaps:
Not suitable for searching for an element other than maximum/minimum (O(n) in worst case)
Extra memory overhead to maintain heap structure
Slower than other data structures like arrays and linked lists for non-priority queue operations.