Open Addressing: open addressing is a method for handling collisions.

In Open Addressing, all elements are stored in the hash table itself.
So at any point, the size of the table must be greater than or equal to the total number of keys

Insert(k): Keep probing until an empty slot is found. Once an empty slot is found, insert k. 
Search(k): Keep probing until the slot’s key doesn’t become equal to k or an empty slot is reached. 
Delete(k): Delete operation is interesting. If we simply delete a key, then the search may fail. So slots of deleted keys are marked specially as “deleted”. 
The insert can insert an item in a deleted slot, but the search doesn’t stop at a deleted slot. 

Different ways of Open Addressing:

1. Linear Probing: 
In linear probing, the hash table is searched sequentially that starts from the original location of the hash. 
If in case the location that we get is already occupied, then we check for the next location. 
rehash(key) = (n+1)%table-size.

Applications of linear probing: 
Symbol tables: 
Caching: 
Databases: 
Compiler design: 
Spell checking: 

Challenges in Linear Probing :
Primary Clustering:   
Secondary Clustering:

2. Quadratic Probing 
Quadratic probing is a method with the help of which we can solve the problem of clustering that was discussed above.

let hash(x) be the slot index computed using hash function.  

If slot hash(x) % S is full, then we try (hash(x) + 1*1) % S
If (hash(x) + 1*1) % S is also full, then we try (hash(x) + 2*2) % S
If (hash(x) + 2*2) % S is also full, then we try (hash(x) + 3*3) % S

3. Double Hashing 
In this technique, the increments for the probing sequence are computed by using another hash function. 
We use another hash function hash2(x) and look for the i*hash2(x) slot in the ith rotation.

let hash(x) be the slot index computed using hash function.  

If slot hash(x) % S is full, then we try (hash(x) + 1*hash2(x)) % S
If (hash(x) + 1*hash2(x)) % S is also full, then we try (hash(x) + 2*hash2(x)) % S
If (hash(x) + 2*hash2(x)) % S is also full, then we try (hash(x) + 3*hash2(x)) % S



m = Number of slots in the hash table
n = Number of keys to be inserted in the hash table
 Load factor α = n/m  ( < 1 )
Expected time to search/insert/delete < 1/(1 – α) 
So Search, Insert and Delete take (1/(1 – α)) time

